/// \u{11ee0} â†’ \u{11eff}\
///\
/// ð‘»  ð‘»¡ ð‘»¢ ð‘»£ ð‘»¤ ð‘»¥ ð‘»¦ ð‘»§ ð‘»¨ ð‘»© ð‘»ª ð‘»« ð‘»¬ ð‘»­ ð‘»® ð‘»¯\
/// ð‘»° ð‘»± ð‘»² ð‘»³ ð‘»´ ð‘»µ ð‘»¶ ð‘»· ð‘»¸\

/// A number of constants to give a name to all characters in this block.
pub mod constants {
    /// \u{11ee0}: 'ð‘» '
    pub const LETTER_KA: char = 'ð‘» ';
    /// \u{11ee1}: 'ð‘»¡'
    pub const LETTER_GA: char = 'ð‘»¡';
    /// \u{11ee2}: 'ð‘»¢'
    pub const LETTER_NGA: char = 'ð‘»¢';
    /// \u{11ee3}: 'ð‘»£'
    pub const LETTER_PA: char = 'ð‘»£';
    /// \u{11ee4}: 'ð‘»¤'
    pub const LETTER_BA: char = 'ð‘»¤';
    /// \u{11ee5}: 'ð‘»¥'
    pub const LETTER_MA: char = 'ð‘»¥';
    /// \u{11ee6}: 'ð‘»¦'
    pub const LETTER_TA: char = 'ð‘»¦';
    /// \u{11ee7}: 'ð‘»§'
    pub const LETTER_DA: char = 'ð‘»§';
    /// \u{11ee8}: 'ð‘»¨'
    pub const LETTER_NA: char = 'ð‘»¨';
    /// \u{11ee9}: 'ð‘»©'
    pub const LETTER_CA: char = 'ð‘»©';
    /// \u{11eea}: 'ð‘»ª'
    pub const LETTER_JA: char = 'ð‘»ª';
    /// \u{11eeb}: 'ð‘»«'
    pub const LETTER_NYA: char = 'ð‘»«';
    /// \u{11eec}: 'ð‘»¬'
    pub const LETTER_YA: char = 'ð‘»¬';
    /// \u{11eed}: 'ð‘»­'
    pub const LETTER_RA: char = 'ð‘»­';
    /// \u{11eee}: 'ð‘»®'
    pub const LETTER_LA: char = 'ð‘»®';
    /// \u{11eef}: 'ð‘»¯'
    pub const LETTER_VA: char = 'ð‘»¯';
    /// \u{11ef0}: 'ð‘»°'
    pub const LETTER_SA: char = 'ð‘»°';
    /// \u{11ef1}: 'ð‘»±'
    pub const LETTER_A: char = 'ð‘»±';
    /// \u{11ef2}: 'ð‘»²'
    pub const ANGKA: char = 'ð‘»²';
    /// \u{11ef3}: 'ð‘»³'
    pub const VOWEL_SIGN_I: char = 'ð‘»³';
    /// \u{11ef4}: 'ð‘»´'
    pub const VOWEL_SIGN_U: char = 'ð‘»´';
    /// \u{11ef5}: 'ð‘»µ'
    pub const VOWEL_SIGN_E: char = 'ð‘»µ';
    /// \u{11ef6}: 'ð‘»¶'
    pub const VOWEL_SIGN_O: char = 'ð‘»¶';
    /// \u{11ef7}: 'ð‘»·'
    pub const PASSIMBANG: char = 'ð‘»·';
    /// \u{11ef8}: 'ð‘»¸'
    pub const END_OF_SECTION: char = 'ð‘»¸';
}

/// An enum to represent all characters in the Makasar block.
#[derive(Debug, Clone, Copy, Hash, PartialEq, Eq)]
pub enum Makasar {
    /// \u{11ee0}: 'ð‘» '
    LetterKa,
    /// \u{11ee1}: 'ð‘»¡'
    LetterGa,
    /// \u{11ee2}: 'ð‘»¢'
    LetterNga,
    /// \u{11ee3}: 'ð‘»£'
    LetterPa,
    /// \u{11ee4}: 'ð‘»¤'
    LetterBa,
    /// \u{11ee5}: 'ð‘»¥'
    LetterMa,
    /// \u{11ee6}: 'ð‘»¦'
    LetterTa,
    /// \u{11ee7}: 'ð‘»§'
    LetterDa,
    /// \u{11ee8}: 'ð‘»¨'
    LetterNa,
    /// \u{11ee9}: 'ð‘»©'
    LetterCa,
    /// \u{11eea}: 'ð‘»ª'
    LetterJa,
    /// \u{11eeb}: 'ð‘»«'
    LetterNya,
    /// \u{11eec}: 'ð‘»¬'
    LetterYa,
    /// \u{11eed}: 'ð‘»­'
    LetterRa,
    /// \u{11eee}: 'ð‘»®'
    LetterLa,
    /// \u{11eef}: 'ð‘»¯'
    LetterVa,
    /// \u{11ef0}: 'ð‘»°'
    LetterSa,
    /// \u{11ef1}: 'ð‘»±'
    LetterA,
    /// \u{11ef2}: 'ð‘»²'
    Angka,
    /// \u{11ef3}: 'ð‘»³'
    VowelSignI,
    /// \u{11ef4}: 'ð‘»´'
    VowelSignU,
    /// \u{11ef5}: 'ð‘»µ'
    VowelSignE,
    /// \u{11ef6}: 'ð‘»¶'
    VowelSignO,
    /// \u{11ef7}: 'ð‘»·'
    Passimbang,
    /// \u{11ef8}: 'ð‘»¸'
    EndOfSection,
}

impl Into<char> for Makasar {
    fn into(self) -> char {
        use constants::*;
        match self {
            Makasar::LetterKa => LETTER_KA,
            Makasar::LetterGa => LETTER_GA,
            Makasar::LetterNga => LETTER_NGA,
            Makasar::LetterPa => LETTER_PA,
            Makasar::LetterBa => LETTER_BA,
            Makasar::LetterMa => LETTER_MA,
            Makasar::LetterTa => LETTER_TA,
            Makasar::LetterDa => LETTER_DA,
            Makasar::LetterNa => LETTER_NA,
            Makasar::LetterCa => LETTER_CA,
            Makasar::LetterJa => LETTER_JA,
            Makasar::LetterNya => LETTER_NYA,
            Makasar::LetterYa => LETTER_YA,
            Makasar::LetterRa => LETTER_RA,
            Makasar::LetterLa => LETTER_LA,
            Makasar::LetterVa => LETTER_VA,
            Makasar::LetterSa => LETTER_SA,
            Makasar::LetterA => LETTER_A,
            Makasar::Angka => ANGKA,
            Makasar::VowelSignI => VOWEL_SIGN_I,
            Makasar::VowelSignU => VOWEL_SIGN_U,
            Makasar::VowelSignE => VOWEL_SIGN_E,
            Makasar::VowelSignO => VOWEL_SIGN_O,
            Makasar::Passimbang => PASSIMBANG,
            Makasar::EndOfSection => END_OF_SECTION,
        }
    }
}

impl std::convert::TryFrom<char> for Makasar {
    type Error = ();
    fn try_from(c: char) -> Result<Self, Self::Error> {
        use constants::*;
        match c {
            LETTER_KA => Ok(Makasar::LetterKa),
            LETTER_GA => Ok(Makasar::LetterGa),
            LETTER_NGA => Ok(Makasar::LetterNga),
            LETTER_PA => Ok(Makasar::LetterPa),
            LETTER_BA => Ok(Makasar::LetterBa),
            LETTER_MA => Ok(Makasar::LetterMa),
            LETTER_TA => Ok(Makasar::LetterTa),
            LETTER_DA => Ok(Makasar::LetterDa),
            LETTER_NA => Ok(Makasar::LetterNa),
            LETTER_CA => Ok(Makasar::LetterCa),
            LETTER_JA => Ok(Makasar::LetterJa),
            LETTER_NYA => Ok(Makasar::LetterNya),
            LETTER_YA => Ok(Makasar::LetterYa),
            LETTER_RA => Ok(Makasar::LetterRa),
            LETTER_LA => Ok(Makasar::LetterLa),
            LETTER_VA => Ok(Makasar::LetterVa),
            LETTER_SA => Ok(Makasar::LetterSa),
            LETTER_A => Ok(Makasar::LetterA),
            ANGKA => Ok(Makasar::Angka),
            VOWEL_SIGN_I => Ok(Makasar::VowelSignI),
            VOWEL_SIGN_U => Ok(Makasar::VowelSignU),
            VOWEL_SIGN_E => Ok(Makasar::VowelSignE),
            VOWEL_SIGN_O => Ok(Makasar::VowelSignO),
            PASSIMBANG => Ok(Makasar::Passimbang),
            END_OF_SECTION => Ok(Makasar::EndOfSection),
            _ => Err(()),
        }
    }
}

impl Into<u32> for Makasar {
    fn into(self) -> u32 {
        let c: char = self.into();
        let hex = c
            .escape_unicode()
            .to_string()
            .replace("\\u{", "")
            .replace("}", "");
        u32::from_str_radix(&hex, 16).unwrap()
    }
}

impl std::convert::TryFrom<u32> for Makasar {
    type Error = ();
    fn try_from(u: u32) -> Result<Self, Self::Error> {
        if let Ok(c) = char::try_from(u) {
            Self::try_from(c)
        } else {
            Err(())
        }
    }
}

impl Iterator for Makasar {
    type Item = Self;
    fn next(&mut self) -> Option<Self> {
        let index: u32 = (*self).into();
        use std::convert::TryFrom;
        Self::try_from(index + 1).ok()
    }
}

impl Makasar {
    /// The character with the lowest index in this unicode block
    pub fn new() -> Self {
        Makasar::LetterKa
    }

    /// The character's name, all lowercase and space-separated
    pub fn name(&self) -> &str {
        match self {
            Makasar::LetterKa => "makasar letter ka",
            Makasar::LetterGa => "makasar letter ga",
            Makasar::LetterNga => "makasar letter nga",
            Makasar::LetterPa => "makasar letter pa",
            Makasar::LetterBa => "makasar letter ba",
            Makasar::LetterMa => "makasar letter ma",
            Makasar::LetterTa => "makasar letter ta",
            Makasar::LetterDa => "makasar letter da",
            Makasar::LetterNa => "makasar letter na",
            Makasar::LetterCa => "makasar letter ca",
            Makasar::LetterJa => "makasar letter ja",
            Makasar::LetterNya => "makasar letter nya",
            Makasar::LetterYa => "makasar letter ya",
            Makasar::LetterRa => "makasar letter ra",
            Makasar::LetterLa => "makasar letter la",
            Makasar::LetterVa => "makasar letter va",
            Makasar::LetterSa => "makasar letter sa",
            Makasar::LetterA => "makasar letter a",
            Makasar::Angka => "makasar angka",
            Makasar::VowelSignI => "makasar vowel sign i",
            Makasar::VowelSignU => "makasar vowel sign u",
            Makasar::VowelSignE => "makasar vowel sign e",
            Makasar::VowelSignO => "makasar vowel sign o",
            Makasar::Passimbang => "makasar passimbang",
            Makasar::EndOfSection => "makasar end of section",
        }
    }
}
