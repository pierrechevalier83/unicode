
/// An enum to represent all characters in the Makasar block.
#[derive(Debug, Clone, Copy, Hash, PartialEq, Eq)]
pub enum Makasar {
    /// \u{11ee0}: 'ð‘» '
    LetterKa,
    /// \u{11ee1}: 'ð‘»¡'
    LetterGa,
    /// \u{11ee2}: 'ð‘»¢'
    LetterNga,
    /// \u{11ee3}: 'ð‘»£'
    LetterPa,
    /// \u{11ee4}: 'ð‘»¤'
    LetterBa,
    /// \u{11ee5}: 'ð‘»¥'
    LetterMa,
    /// \u{11ee6}: 'ð‘»¦'
    LetterTa,
    /// \u{11ee7}: 'ð‘»§'
    LetterDa,
    /// \u{11ee8}: 'ð‘»¨'
    LetterNa,
    /// \u{11ee9}: 'ð‘»©'
    LetterCa,
    /// \u{11eea}: 'ð‘»ª'
    LetterJa,
    /// \u{11eeb}: 'ð‘»«'
    LetterNya,
    /// \u{11eec}: 'ð‘»¬'
    LetterYa,
    /// \u{11eed}: 'ð‘»­'
    LetterRa,
    /// \u{11eee}: 'ð‘»®'
    LetterLa,
    /// \u{11eef}: 'ð‘»¯'
    LetterVa,
    /// \u{11ef0}: 'ð‘»°'
    LetterSa,
    /// \u{11ef1}: 'ð‘»±'
    LetterA,
    /// \u{11ef2}: 'ð‘»²'
    Angka,
    /// \u{11ef3}: 'ð‘»³'
    VowelSignI,
    /// \u{11ef4}: 'ð‘»´'
    VowelSignU,
    /// \u{11ef5}: 'ð‘»µ'
    VowelSignE,
    /// \u{11ef6}: 'ð‘»¶'
    VowelSignO,
    /// \u{11ef7}: 'ð‘»·'
    Passimbang,
    /// \u{11ef8}: 'ð‘»¸'
    EndOfSection,
}

impl Into<char> for Makasar {
    fn into(self) -> char {
        match self {
            Makasar::LetterKa => 'ð‘» ',
            Makasar::LetterGa => 'ð‘»¡',
            Makasar::LetterNga => 'ð‘»¢',
            Makasar::LetterPa => 'ð‘»£',
            Makasar::LetterBa => 'ð‘»¤',
            Makasar::LetterMa => 'ð‘»¥',
            Makasar::LetterTa => 'ð‘»¦',
            Makasar::LetterDa => 'ð‘»§',
            Makasar::LetterNa => 'ð‘»¨',
            Makasar::LetterCa => 'ð‘»©',
            Makasar::LetterJa => 'ð‘»ª',
            Makasar::LetterNya => 'ð‘»«',
            Makasar::LetterYa => 'ð‘»¬',
            Makasar::LetterRa => 'ð‘»­',
            Makasar::LetterLa => 'ð‘»®',
            Makasar::LetterVa => 'ð‘»¯',
            Makasar::LetterSa => 'ð‘»°',
            Makasar::LetterA => 'ð‘»±',
            Makasar::Angka => 'ð‘»²',
            Makasar::VowelSignI => 'ð‘»³',
            Makasar::VowelSignU => 'ð‘»´',
            Makasar::VowelSignE => 'ð‘»µ',
            Makasar::VowelSignO => 'ð‘»¶',
            Makasar::Passimbang => 'ð‘»·',
            Makasar::EndOfSection => 'ð‘»¸',
        }
    }
}

impl std::convert::TryFrom<char> for Makasar {
    type Error = ();
    fn try_from(c: char) -> Result<Self, Self::Error> {
        match c {
            'ð‘» ' => Ok(Makasar::LetterKa),
            'ð‘»¡' => Ok(Makasar::LetterGa),
            'ð‘»¢' => Ok(Makasar::LetterNga),
            'ð‘»£' => Ok(Makasar::LetterPa),
            'ð‘»¤' => Ok(Makasar::LetterBa),
            'ð‘»¥' => Ok(Makasar::LetterMa),
            'ð‘»¦' => Ok(Makasar::LetterTa),
            'ð‘»§' => Ok(Makasar::LetterDa),
            'ð‘»¨' => Ok(Makasar::LetterNa),
            'ð‘»©' => Ok(Makasar::LetterCa),
            'ð‘»ª' => Ok(Makasar::LetterJa),
            'ð‘»«' => Ok(Makasar::LetterNya),
            'ð‘»¬' => Ok(Makasar::LetterYa),
            'ð‘»­' => Ok(Makasar::LetterRa),
            'ð‘»®' => Ok(Makasar::LetterLa),
            'ð‘»¯' => Ok(Makasar::LetterVa),
            'ð‘»°' => Ok(Makasar::LetterSa),
            'ð‘»±' => Ok(Makasar::LetterA),
            'ð‘»²' => Ok(Makasar::Angka),
            'ð‘»³' => Ok(Makasar::VowelSignI),
            'ð‘»´' => Ok(Makasar::VowelSignU),
            'ð‘»µ' => Ok(Makasar::VowelSignE),
            'ð‘»¶' => Ok(Makasar::VowelSignO),
            'ð‘»·' => Ok(Makasar::Passimbang),
            'ð‘»¸' => Ok(Makasar::EndOfSection),
            _ => Err(()),
        }
    }
}

impl Into<u32> for Makasar {
    fn into(self) -> u32 {
        let c: char = self.into();
        let hex = c
            .escape_unicode()
            .to_string()
            .replace("\\u{", "")
            .replace("}", "");
        u32::from_str_radix(&hex, 16).unwrap()
    }
}

impl std::convert::TryFrom<u32> for Makasar {
    type Error = ();
    fn try_from(u: u32) -> Result<Self, Self::Error> {
        if let Ok(c) = char::try_from(u) {
            Self::try_from(c)
        } else {
            Err(())
        }
    }
}

impl Iterator for Makasar {
    type Item = Self;
    fn next(&mut self) -> Option<Self> {
        let index: u32 = (*self).into();
        use std::convert::TryFrom;
        Self::try_from(index + 1).ok()
    }
}

impl Makasar {
    /// The character with the lowest index in this unicode block
    pub fn new() -> Self {
        Makasar::LetterKa
    }

    /// The character's name, all lowercase and space-separated
    pub fn name(&self) -> &str {
        match self {
            Makasar::LetterKa => "makasar letter ka",
            Makasar::LetterGa => "makasar letter ga",
            Makasar::LetterNga => "makasar letter nga",
            Makasar::LetterPa => "makasar letter pa",
            Makasar::LetterBa => "makasar letter ba",
            Makasar::LetterMa => "makasar letter ma",
            Makasar::LetterTa => "makasar letter ta",
            Makasar::LetterDa => "makasar letter da",
            Makasar::LetterNa => "makasar letter na",
            Makasar::LetterCa => "makasar letter ca",
            Makasar::LetterJa => "makasar letter ja",
            Makasar::LetterNya => "makasar letter nya",
            Makasar::LetterYa => "makasar letter ya",
            Makasar::LetterRa => "makasar letter ra",
            Makasar::LetterLa => "makasar letter la",
            Makasar::LetterVa => "makasar letter va",
            Makasar::LetterSa => "makasar letter sa",
            Makasar::LetterA => "makasar letter a",
            Makasar::Angka => "makasar angka",
            Makasar::VowelSignI => "makasar vowel sign i",
            Makasar::VowelSignU => "makasar vowel sign u",
            Makasar::VowelSignE => "makasar vowel sign e",
            Makasar::VowelSignO => "makasar vowel sign o",
            Makasar::Passimbang => "makasar passimbang",
            Makasar::EndOfSection => "makasar end of section",
        }
    }
}
