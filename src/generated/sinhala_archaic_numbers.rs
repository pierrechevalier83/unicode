
/// An enum to represent all characters in the SinhalaArchaicNumbers block.
#[derive(Debug, Clone, Copy, Hash, PartialEq, Eq)]
pub enum SinhalaArchaicNumbers {
    /// \u{111e1}: 'ð‘‡¡'
    SinhalaArchaicDigitOne,
    /// \u{111e2}: 'ð‘‡¢'
    SinhalaArchaicDigitTwo,
    /// \u{111e3}: 'ð‘‡£'
    SinhalaArchaicDigitThree,
    /// \u{111e4}: 'ð‘‡¤'
    SinhalaArchaicDigitFour,
    /// \u{111e5}: 'ð‘‡¥'
    SinhalaArchaicDigitFive,
    /// \u{111e6}: 'ð‘‡¦'
    SinhalaArchaicDigitSix,
    /// \u{111e7}: 'ð‘‡§'
    SinhalaArchaicDigitSeven,
    /// \u{111e8}: 'ð‘‡¨'
    SinhalaArchaicDigitEight,
    /// \u{111e9}: 'ð‘‡©'
    SinhalaArchaicDigitNine,
    /// \u{111ea}: 'ð‘‡ª'
    SinhalaArchaicNumberTen,
    /// \u{111eb}: 'ð‘‡«'
    SinhalaArchaicNumberTwenty,
    /// \u{111ec}: 'ð‘‡¬'
    SinhalaArchaicNumberThirty,
    /// \u{111ed}: 'ð‘‡­'
    SinhalaArchaicNumberForty,
    /// \u{111ee}: 'ð‘‡®'
    SinhalaArchaicNumberFifty,
    /// \u{111ef}: 'ð‘‡¯'
    SinhalaArchaicNumberSixty,
    /// \u{111f0}: 'ð‘‡°'
    SinhalaArchaicNumberSeventy,
    /// \u{111f1}: 'ð‘‡±'
    SinhalaArchaicNumberEighty,
    /// \u{111f2}: 'ð‘‡²'
    SinhalaArchaicNumberNinety,
    /// \u{111f3}: 'ð‘‡³'
    SinhalaArchaicNumberOneHundred,
    /// \u{111f4}: 'ð‘‡´'
    SinhalaArchaicNumberOneThousand,
}

impl Into<char> for SinhalaArchaicNumbers {
    fn into(self) -> char {
        match self {
            SinhalaArchaicNumbers::SinhalaArchaicDigitOne => 'ð‘‡¡',
            SinhalaArchaicNumbers::SinhalaArchaicDigitTwo => 'ð‘‡¢',
            SinhalaArchaicNumbers::SinhalaArchaicDigitThree => 'ð‘‡£',
            SinhalaArchaicNumbers::SinhalaArchaicDigitFour => 'ð‘‡¤',
            SinhalaArchaicNumbers::SinhalaArchaicDigitFive => 'ð‘‡¥',
            SinhalaArchaicNumbers::SinhalaArchaicDigitSix => 'ð‘‡¦',
            SinhalaArchaicNumbers::SinhalaArchaicDigitSeven => 'ð‘‡§',
            SinhalaArchaicNumbers::SinhalaArchaicDigitEight => 'ð‘‡¨',
            SinhalaArchaicNumbers::SinhalaArchaicDigitNine => 'ð‘‡©',
            SinhalaArchaicNumbers::SinhalaArchaicNumberTen => 'ð‘‡ª',
            SinhalaArchaicNumbers::SinhalaArchaicNumberTwenty => 'ð‘‡«',
            SinhalaArchaicNumbers::SinhalaArchaicNumberThirty => 'ð‘‡¬',
            SinhalaArchaicNumbers::SinhalaArchaicNumberForty => 'ð‘‡­',
            SinhalaArchaicNumbers::SinhalaArchaicNumberFifty => 'ð‘‡®',
            SinhalaArchaicNumbers::SinhalaArchaicNumberSixty => 'ð‘‡¯',
            SinhalaArchaicNumbers::SinhalaArchaicNumberSeventy => 'ð‘‡°',
            SinhalaArchaicNumbers::SinhalaArchaicNumberEighty => 'ð‘‡±',
            SinhalaArchaicNumbers::SinhalaArchaicNumberNinety => 'ð‘‡²',
            SinhalaArchaicNumbers::SinhalaArchaicNumberOneHundred => 'ð‘‡³',
            SinhalaArchaicNumbers::SinhalaArchaicNumberOneThousand => 'ð‘‡´',
        }
    }
}

impl std::convert::TryFrom<char> for SinhalaArchaicNumbers {
    type Error = ();
    fn try_from(c: char) -> Result<Self, Self::Error> {
        match c {
            'ð‘‡¡' => Ok(SinhalaArchaicNumbers::SinhalaArchaicDigitOne),
            'ð‘‡¢' => Ok(SinhalaArchaicNumbers::SinhalaArchaicDigitTwo),
            'ð‘‡£' => Ok(SinhalaArchaicNumbers::SinhalaArchaicDigitThree),
            'ð‘‡¤' => Ok(SinhalaArchaicNumbers::SinhalaArchaicDigitFour),
            'ð‘‡¥' => Ok(SinhalaArchaicNumbers::SinhalaArchaicDigitFive),
            'ð‘‡¦' => Ok(SinhalaArchaicNumbers::SinhalaArchaicDigitSix),
            'ð‘‡§' => Ok(SinhalaArchaicNumbers::SinhalaArchaicDigitSeven),
            'ð‘‡¨' => Ok(SinhalaArchaicNumbers::SinhalaArchaicDigitEight),
            'ð‘‡©' => Ok(SinhalaArchaicNumbers::SinhalaArchaicDigitNine),
            'ð‘‡ª' => Ok(SinhalaArchaicNumbers::SinhalaArchaicNumberTen),
            'ð‘‡«' => Ok(SinhalaArchaicNumbers::SinhalaArchaicNumberTwenty),
            'ð‘‡¬' => Ok(SinhalaArchaicNumbers::SinhalaArchaicNumberThirty),
            'ð‘‡­' => Ok(SinhalaArchaicNumbers::SinhalaArchaicNumberForty),
            'ð‘‡®' => Ok(SinhalaArchaicNumbers::SinhalaArchaicNumberFifty),
            'ð‘‡¯' => Ok(SinhalaArchaicNumbers::SinhalaArchaicNumberSixty),
            'ð‘‡°' => Ok(SinhalaArchaicNumbers::SinhalaArchaicNumberSeventy),
            'ð‘‡±' => Ok(SinhalaArchaicNumbers::SinhalaArchaicNumberEighty),
            'ð‘‡²' => Ok(SinhalaArchaicNumbers::SinhalaArchaicNumberNinety),
            'ð‘‡³' => Ok(SinhalaArchaicNumbers::SinhalaArchaicNumberOneHundred),
            'ð‘‡´' => Ok(SinhalaArchaicNumbers::SinhalaArchaicNumberOneThousand),
            _ => Err(()),
        }
    }
}

impl Into<u32> for SinhalaArchaicNumbers {
    fn into(self) -> u32 {
        let c: char = self.into();
        let hex = c
            .escape_unicode()
            .to_string()
            .replace("\\u{", "")
            .replace("}", "");
        u32::from_str_radix(&hex, 16).unwrap()
    }
}

impl std::convert::TryFrom<u32> for SinhalaArchaicNumbers {
    type Error = ();
    fn try_from(u: u32) -> Result<Self, Self::Error> {
        if let Ok(c) = char::try_from(u) {
            Self::try_from(c)
        } else {
            Err(())
        }
    }
}

impl Iterator for SinhalaArchaicNumbers {
    type Item = Self;
    fn next(&mut self) -> Option<Self> {
        let index: u32 = (*self).into();
        use std::convert::TryFrom;
        Self::try_from(index + 1).ok()
    }
}

impl SinhalaArchaicNumbers {
    /// The character with the lowest index in this unicode block
    pub fn new() -> Self {
        SinhalaArchaicNumbers::SinhalaArchaicDigitOne
    }

    /// The character's name, in sentence case
    pub fn name(&self) -> String {
        let s = std::format!("SinhalaArchaicNumbers{:#?}", self);
        string_morph::to_sentence_case(&s)
    }
}
