
/// An enum to represent all characters in the MongolianSupplement block.
#[derive(Debug, Clone, Copy, Hash, PartialEq, Eq)]
pub enum MongolianSupplement {
    /// \u{11660}: 'ð‘™ '
    MongolianBirgaWithOrnament,
    /// \u{11661}: 'ð‘™¡'
    MongolianRotatedBirga,
    /// \u{11662}: 'ð‘™¢'
    MongolianDoubleBirgaWithOrnament,
    /// \u{11663}: 'ð‘™£'
    MongolianTripleBirgaWithOrnament,
    /// \u{11664}: 'ð‘™¤'
    MongolianBirgaWithDoubleOrnament,
    /// \u{11665}: 'ð‘™¥'
    MongolianRotatedBirgaWithOrnament,
    /// \u{11666}: 'ð‘™¦'
    MongolianRotatedBirgaWithDoubleOrnament,
    /// \u{11667}: 'ð‘™§'
    MongolianInvertedBirga,
    /// \u{11668}: 'ð‘™¨'
    MongolianInvertedBirgaWithDoubleOrnament,
    /// \u{11669}: 'ð‘™©'
    MongolianSwirlBirga,
    /// \u{1166a}: 'ð‘™ª'
    MongolianSwirlBirgaWithOrnament,
    /// \u{1166b}: 'ð‘™«'
    MongolianSwirlBirgaWithDoubleOrnament,
    /// \u{1166c}: 'ð‘™¬'
    MongolianTurnedSwirlBirgaWithDoubleOrnament,
}

impl Into<char> for MongolianSupplement {
    fn into(self) -> char {
        match self {
            MongolianSupplement::MongolianBirgaWithOrnament => 'ð‘™ ',
            MongolianSupplement::MongolianRotatedBirga => 'ð‘™¡',
            MongolianSupplement::MongolianDoubleBirgaWithOrnament => 'ð‘™¢',
            MongolianSupplement::MongolianTripleBirgaWithOrnament => 'ð‘™£',
            MongolianSupplement::MongolianBirgaWithDoubleOrnament => 'ð‘™¤',
            MongolianSupplement::MongolianRotatedBirgaWithOrnament => 'ð‘™¥',
            MongolianSupplement::MongolianRotatedBirgaWithDoubleOrnament => 'ð‘™¦',
            MongolianSupplement::MongolianInvertedBirga => 'ð‘™§',
            MongolianSupplement::MongolianInvertedBirgaWithDoubleOrnament => 'ð‘™¨',
            MongolianSupplement::MongolianSwirlBirga => 'ð‘™©',
            MongolianSupplement::MongolianSwirlBirgaWithOrnament => 'ð‘™ª',
            MongolianSupplement::MongolianSwirlBirgaWithDoubleOrnament => 'ð‘™«',
            MongolianSupplement::MongolianTurnedSwirlBirgaWithDoubleOrnament => 'ð‘™¬',
        }
    }
}

impl std::convert::TryFrom<char> for MongolianSupplement {
    type Error = ();
    fn try_from(c: char) -> Result<Self, Self::Error> {
        match c {
            'ð‘™ ' => Ok(MongolianSupplement::MongolianBirgaWithOrnament),
            'ð‘™¡' => Ok(MongolianSupplement::MongolianRotatedBirga),
            'ð‘™¢' => Ok(MongolianSupplement::MongolianDoubleBirgaWithOrnament),
            'ð‘™£' => Ok(MongolianSupplement::MongolianTripleBirgaWithOrnament),
            'ð‘™¤' => Ok(MongolianSupplement::MongolianBirgaWithDoubleOrnament),
            'ð‘™¥' => Ok(MongolianSupplement::MongolianRotatedBirgaWithOrnament),
            'ð‘™¦' => Ok(MongolianSupplement::MongolianRotatedBirgaWithDoubleOrnament),
            'ð‘™§' => Ok(MongolianSupplement::MongolianInvertedBirga),
            'ð‘™¨' => Ok(MongolianSupplement::MongolianInvertedBirgaWithDoubleOrnament),
            'ð‘™©' => Ok(MongolianSupplement::MongolianSwirlBirga),
            'ð‘™ª' => Ok(MongolianSupplement::MongolianSwirlBirgaWithOrnament),
            'ð‘™«' => Ok(MongolianSupplement::MongolianSwirlBirgaWithDoubleOrnament),
            'ð‘™¬' => Ok(MongolianSupplement::MongolianTurnedSwirlBirgaWithDoubleOrnament),
            _ => Err(()),
        }
    }
}

impl Into<u32> for MongolianSupplement {
    fn into(self) -> u32 {
        let c: char = self.into();
        let hex = c
            .escape_unicode()
            .to_string()
            .replace("\\u{", "")
            .replace("}", "");
        u32::from_str_radix(&hex, 16).unwrap()
    }
}

impl std::convert::TryFrom<u32> for MongolianSupplement {
    type Error = ();
    fn try_from(u: u32) -> Result<Self, Self::Error> {
        if let Ok(c) = char::try_from(u) {
            Self::try_from(c)
        } else {
            Err(())
        }
    }
}

impl Iterator for MongolianSupplement {
    type Item = Self;
    fn next(&mut self) -> Option<Self> {
        let index: u32 = (*self).into();
        use std::convert::TryFrom;
        Self::try_from(index + 1).ok()
    }
}

impl MongolianSupplement {
    /// The character with the lowest index in this unicode block
    pub fn new() -> Self {
        MongolianSupplement::MongolianBirgaWithOrnament
    }

    /// The character's name, all lowercase and space-separated
    pub fn name(&self) -> &str {
        match self {
            MongolianSupplement::MongolianBirgaWithOrnament => "mongolian birga with ornament",
            MongolianSupplement::MongolianRotatedBirga => "mongolian rotated birga",
            MongolianSupplement::MongolianDoubleBirgaWithOrnament => "mongolian double birga with ornament",
            MongolianSupplement::MongolianTripleBirgaWithOrnament => "mongolian triple birga with ornament",
            MongolianSupplement::MongolianBirgaWithDoubleOrnament => "mongolian birga with double ornament",
            MongolianSupplement::MongolianRotatedBirgaWithOrnament => "mongolian rotated birga with ornament",
            MongolianSupplement::MongolianRotatedBirgaWithDoubleOrnament => "mongolian rotated birga with double ornament",
            MongolianSupplement::MongolianInvertedBirga => "mongolian inverted birga",
            MongolianSupplement::MongolianInvertedBirgaWithDoubleOrnament => "mongolian inverted birga with double ornament",
            MongolianSupplement::MongolianSwirlBirga => "mongolian swirl birga",
            MongolianSupplement::MongolianSwirlBirgaWithOrnament => "mongolian swirl birga with ornament",
            MongolianSupplement::MongolianSwirlBirgaWithDoubleOrnament => "mongolian swirl birga with double ornament",
            MongolianSupplement::MongolianTurnedSwirlBirgaWithDoubleOrnament => "mongolian turned swirl birga with double ornament",
        }
    }
}
